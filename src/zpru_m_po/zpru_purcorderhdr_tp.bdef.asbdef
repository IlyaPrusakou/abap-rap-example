managed with additional save and cleanup with full data
implementation in class zbp_pru_purcorderhdr_tp unique;
strict ( 2 );
extensible
{
  with validations on save;
  with determinations on save;
  with determinations on modify;
  with additional save;
}

with draft;

define behavior for Zpru_PurcOrderHdr_tp alias OrderTP
persistent table zpru_purc_order
draft table zpru_po_draft
lock master unmanaged
total etag lastChanged
authorization master ( global, instance )
etag master lastChanged
extensible
late numbering
changedocuments master ( ZPRU_PURC_ORDER )
{

  field ( readonly : update ) purchaseOrderId;
  field ( mandatory ) supplierId, deliveryDate;
  field ( readonly ) status, buyerId, buyerName;

  create;
  update;
  delete;
  association _items_tp { create; with draft; }

  draft action Discard with additional implementation;
  draft action Activate with additional implementation optimized;
  draft action Resume with additional implementation;
  draft action Edit with additional implementation;
  draft determine action Prepare extensible
  {
    determination ( always ) setControlTimestamp;
    validation ( always ) checkDates;
    determination ( always ) ItemTP~findWarehouseLocation;
    validation ( always ) ItemTP~checkQuantity;
  }

  determine action checkOrder
  {
    determination ( always ) setControlTimestamp;
    validation ( always ) checkDates;
    determination ( always ) ItemTP~findWarehouseLocation;
    validation ( always ) ItemTP~checkQuantity;
  }

  internal action revalidatePricingRules result [0..1] Zpru_D_Total_Amount;
  static action sendOrderStatisticToAzure parameter Zpru_D_Azure_Location;
  action ChangeStatus parameter Zpru_D_New_Status;
  factory action createFromTemplate parameter Zpru_D_Order_Template [1];

  internal function isSupplierBlacklisted result [0..1] Zpru_D_SupplierInBlackList;
  static function getApprovedSupplierList result [0..*] Zpru_D_ApprovedSupplier;
  function getStatusHistory result [0..*] Zpru_D_StatusHistoryRecord;

  validation checkDates on save { create; field orderDate, deliveryDate; }
  determination recalculateShippingMethod on modify { field shippingMethod; }
  determination setControlTimestamp on save { create; update; }

  mapping for zpru_purc_order corresponding extensible
    {
      purchaseOrderId  = purchase_order_id;
      orderDate        = order_date;
      supplierId       = supplier_id;
      supplierName     = supplier_name;
      buyerId          = buyer_id;
      buyerName        = buyer_name;
      totalAmount      = total_amount;
      headerCurrency   = header_currency;
      deliveryDate     = delivery_date;
      status           = status;
      paymentTerms     = payment_terms;
      shippingMethod   = shipping_method;
      controlTimestamp = control_timestamp;
      createdBy        = created_by;
      createOn         = create_on;
      changedBy        = changed_by;
      changedOn        = changed_on;
      lastChanged      = last_changed;
    }
}

define behavior for Zpru_PurcOrderItem_tp alias ItemTP
persistent table zpru_po_item
draft table zpru_poitm_draft
lock dependent by _header_tp
authorization dependent by _header_tp
etag dependent by _header_tp
late numbering
extensible
changedocuments dependent by _header_tp
{

  field ( readonly ) totalPrice;
  field ( readonly : update ) purchaseOrderId, itemId, productId;
  field ( mandatory : create ) productId;
  update;
  delete;

  association _header_tp { with draft; }

  action markAsUrgent;
  function getInventoryStatus result [1] Zpru_D_InventoryStatus;

  determination calculateTotalPrice on modify { field quantity, unitPrice; }
  determination findWarehouseLocation on save { create; update; }
  validation checkQuantity on save { create; update; }

  mapping for zpru_po_item corresponding extensible
    {
      itemId            = item_id;
      purchaseOrderId   = purchase_order_id;
      itemNumber        = item_number;
      productId         = product_id;
      productName       = product_name;
      quantity          = quantity;
      unitPrice         = unit_price;
      totalPrice        = total_price;
      deliveryDate      = delivery_date;
      warehouseLocation = warehouse_location;
      itemCurrency      = item_currency;
      createdBy         = created_by;
      createOn          = create_on;
      changedBy         = changed_by;
      changedOn         = changed_on;
    }
}