managed with additional save and cleanup with full data
implementation in class zbp_pru_purcorderhdr_tp unique;
strict ( 2 );
extensible
{
  with validations on save;
  with determinations on save;
  with determinations on modify;
  with additional save;
}

with draft;

define behavior for Zpru_PurcOrderHdr_tp alias OrderTP
persistent table zpru_purc_order
draft table zpru_po_draft query ZPRU_PURCORDER_DRAFT_Q
lock master unmanaged
total etag lastChanged
authorization master ( global, instance )
etag master lastChanged
extensible
late numbering
changedocuments master ( ZPRU_PURC_ORDER )
{

  field ( readonly : update ) purchaseOrderId, headerCurrency;
  field ( mandatory ) supplierId, deliveryDate, buyerId;
  field ( readonly ) status, buyerName, supplierName, totalAmount;
  field ( features : instance ) paymentTerms;

  create ( precheck );
  update ( precheck );
  delete ( precheck );
  association _items_tp { create; with draft; }
  association _text_tp { create( precheck ); with draft; } // there are example implementation for precheck

  draft action Discard with additional implementation;
  draft action Activate with additional implementation optimized;
  draft action Resume with additional implementation;
  draft action Edit with additional implementation;
  draft determine action Prepare extensible
  {
    determination ( always ) calcTotalAmount;
    determination ( always ) setControlTimestamp;
    determination ( always ) ItemTP~findWarehouseLocation;
    validation ( always ) checkDates;
    validation ( always ) checkHeaderCurrency;
    validation ( always ) checkSupplier;
    validation ( always ) checkBuyer;
    validation ( always ) ItemTP~checkQuantity;
    validation ( always ) ItemTP~checkItemCurrency;
  }

  determine action checkOrder extensible
  {
    determination ( always ) calcTotalAmount;
    determination ( always ) setControlTimestamp;
    determination ( always ) ItemTP~findWarehouseLocation;
    validation ( always ) checkDates;
    validation ( always ) checkHeaderCurrency;
    validation ( always ) checkSupplier;
    validation ( always ) checkBuyer;
    validation ( always ) ItemTP~checkQuantity;
    validation ( always ) ItemTP~checkItemCurrency;
  }

  internal action revalidatePricingRules result [0..1] Zpru_D_Total_Amount;
  static action sendOrderStatisticToAzure parameter Zpru_D_Azure_Location;
  action ( precheck ) ChangeStatus deep parameter Zpru_D_New_Status;
  factory action createFromTemplate parameter Zpru_D_Order_Template [1];

  internal function isSupplierBlacklisted result [0..1] Zpru_D_SupplierInBlackList;
  static function getMajorSupplier result [0..*] Zpru_D_ApprovedSupplier;
  function getStatusHistory deep result [0..*] ZPRU_D_HistoryRoot;
  function getAllItems result selective [0..*] entity Zpru_PurcOrderItem_tp; //QQQ CHECK DUPLICATE ENTRIES

  validation checkDates on save { create; field orderDate, deliveryDate; }
  validation checkHeaderCurrency on save { create; }
  validation checkSupplier on save { create; update; }
  validation checkBuyer on save { create; update; }
  determination recalculateShippingMethod on modify { field supplierId; }
  determination determineNames on modify { field supplierId, buyerId; }
  determination setControlTimestamp on save { create; }
  determination calcTotalAmount on save { create; update; }

  event orderCreated deep parameter Zpru_PurcOrderHdr_Abstract;

  mapping for zpru_purc_order corresponding extensible
    {
      purchaseOrderId  = purchase_order_id;
      orderDate        = order_date;
      supplierId       = supplier_id;
      supplierName     = supplier_name;
      buyerId          = buyer_id;
      buyerName        = buyer_name;
      totalAmount      = total_amount;
      headerCurrency   = header_currency;
      deliveryDate     = delivery_date;
      status           = status;
      paymentTerms     = payment_terms;
      shippingMethod   = shipping_method;
      controlTimestamp = control_timestamp;
      createdBy        = created_by;
      createOn         = create_on;
      changedBy        = changed_by;
      changedOn        = changed_on;
      lastChanged      = last_changed;
    }

  // optional mapping for root node
  mapping for zpru_purcorderhdr_partner control zpru_purcorderhdr_partner_ctrl corresponding extensible // map on dictionary structure
    {
      buyerId         = buyer_Id2 control buyer_id4;
      buyerName       = buyer_Name2 control buyer_name4;
      deliveryDate    = delivery_Date2 control delivery_date4;
      headerCurrency  = header_Currency2 control header_currency4;
      orderDate       = order_Date2 control order_date4;
      paymentTerms    = payment_Terms2 control payment_terms4;
      purchaseOrderId = purchase_Order_Id2 control purchase_Order_Id4;
      shippingMethod  = shipping_Method2 control shipping_Method4;
      status          = status2 control status4;
      supplierId      = supplier_Id2 control supplier_Id4;
      supplierName    = supplier_Name2 control supplier_Name4;
      totalAmount     = total_Amount2 control total_Amount4;
    }
}
define behavior for Zpru_PurcOrderItem_tp alias ItemTP
persistent table zpru_po_item
draft table zpru_poitm_draft query ZPRU_ORDERITEM_DRAFT_Q
lock dependent by _header_tp
authorization dependent by _header_tp
etag dependent by _header_tp
late numbering
extensible
changedocuments dependent by _header_tp
{

  field ( readonly ) totalPrice, warehouseLocation, itemNumber;
  field ( readonly : update ) purchaseOrderId, itemId, productId, itemCurrency, unitPrice;
  field ( mandatory : create ) productId, quantity, unitPrice;
  update;
  delete;

  association _header_tp { with draft; }

  action markAsUrgent;
  function getInventoryStatus result [1] Zpru_D_InventoryStatus;

  determination calculateTotalPrice on modify { field quantity, unitPrice; }
  determination findWarehouseLocation on save { create; field productId; }
  determination writeItemNumber on save { create; }
  validation checkQuantity on save { create; update; }
  validation checkItemCurrency on save { create; }

  mapping for zpru_po_item corresponding extensible
    {
      itemId            = item_id;
      purchaseOrderId   = purchase_order_id;
      itemNumber        = item_number;
      productId         = product_id;
      productName       = product_name;
      quantity          = quantity;
      unitPrice         = unit_price;
      totalPrice        = total_price;
      deliveryDate      = delivery_date;
      warehouseLocation = warehouse_location;
      itemCurrency      = item_currency;
      createdBy         = created_by;
      createOn          = create_on;
      changedBy         = changed_by;
      changedOn         = changed_on;
    }

  // optional mapping for item node
  mapping for zpru_purcorderitem_partner control zpru_purcorderitem_partner_ctr corresponding extensible
    {
      deliveryDate = delivery_Date2 control delivery_Date4;
      isUrgent     = is_Urgent2 control is_Urgent4;
      itemCurrency = item_Currency2 control item_Currency4;
      itemId       = item_Id2 control item_Id4;
      itemNumber   = item_Number2 control item_Number4;
      productId    = product_Id2 control product_Id4;
      productName  = product_Name2 control product_Name4;
      quantity     = quantity2 control quantity4;
      totalPrice   = total_Price2 control total_Price4;
      unitPrice    = unit_Price2 control unit_Price4;
    }
}

define behavior for Zpru_PurcOrderHdr_T_TP alias TextTP
persistent table zpru_purc_ordert
draft table zpru_pot_draft
lock dependent by _header_tp
authorization dependent by _header_tp
etag dependent by _header_tp
late numbering
{

  update;
  delete;
  association _header_tp { with draft; }
  field ( readonly : update ) purchaseOrderId, Language;

  mapping for zpru_purc_ordert corresponding
    {
      PurchaseOrderId = purchase_order_id;
      Language        = language;
      TextContent     = text_content;
    }
}